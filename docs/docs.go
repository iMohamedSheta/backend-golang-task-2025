// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "iMohamedSheta",
            "url": "https://github.com/iMohamedSheta",
            "email": "mohamed15.sheta15@gmail.com"
        },
        "license": {
            "name": "MIT License",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/login": {
            "post": {
                "description": "Authenticate user with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/responses.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.ValidationErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ServerErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "enums.UserRole": {
            "type": "string",
            "enum": [
                "customer",
                "admin"
            ],
            "x-enum-varnames": [
                "RoleCustomer",
                "RoleAdmin"
            ]
        },
        "requests.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "test@test.com"
                },
                "password": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 8,
                    "example": "123456789"
                }
            }
        },
        "response.BadRequestResponse": {
            "description": "Bad request error response",
            "type": "object",
            "properties": {
                "error_code": {
                    "type": "string",
                    "example": "BAD_REQUEST"
                },
                "message": {
                    "type": "string",
                    "example": "Bad request"
                }
            }
        },
        "response.ServerErrorResponse": {
            "description": "Internal server error response",
            "type": "object",
            "properties": {
                "error_code": {
                    "type": "string",
                    "example": "INTERNAL_ERROR"
                },
                "message": {
                    "type": "string",
                    "example": "Internal Server Error"
                }
            }
        },
        "response.ValidationErrorResponse": {
            "description": "Validation error response with field errors",
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "error_code": {
                    "type": "string",
                    "example": "VALIDATION_ERROR"
                },
                "message": {
                    "type": "string",
                    "example": "Validation failed"
                }
            }
        },
        "responses.LoginResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "properties": {
                        "access_token": {
                            "type": "string",
                            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                        },
                        "refresh_token": {
                            "type": "string",
                            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                        },
                        "user": {
                            "type": "object",
                            "properties": {
                                "created_at": {
                                    "type": "string",
                                    "example": "2024-01-01T00:00:00Z"
                                },
                                "email": {
                                    "type": "string",
                                    "example": "user@example.com"
                                },
                                "first_name": {
                                    "type": "string",
                                    "example": "John"
                                },
                                "id": {
                                    "type": "integer",
                                    "example": 1
                                },
                                "is_active": {
                                    "type": "boolean",
                                    "example": true
                                },
                                "is_admin": {
                                    "type": "boolean",
                                    "example": false
                                },
                                "last_login_at": {
                                    "type": "string",
                                    "example": "2024-01-01T00:00:00Z"
                                },
                                "last_name": {
                                    "type": "string",
                                    "example": "Doe"
                                },
                                "phone_number": {
                                    "type": "string",
                                    "example": "+1234567890"
                                },
                                "role": {
                                    "allOf": [
                                        {
                                            "$ref": "#/definitions/enums.UserRole"
                                        }
                                    ],
                                    "example": "customer"
                                },
                                "updated_at": {
                                    "type": "string",
                                    "example": "2024-01-01T00:00:00Z"
                                }
                            }
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "example": "User logged in successfully"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "TaskGo API",
	Description:      "Order Processing System API",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
