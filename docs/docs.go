// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "iMohamedSheta",
            "url": "https://github.com/iMohamedSheta",
            "email": "mohamed15.sheta15@gmail.com"
        },
        "license": {
            "name": "MIT License",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/login": {
            "post": {
                "description": "Authenticate user with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/responses.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.ValidationErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/orders": {
            "post": {
                "description": "Create a new order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Create order",
                "parameters": [
                    {
                        "description": "Create order request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.CreateOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order created successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.CreateOrderResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Action",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "schema": {
                            "$ref": "#/definitions/response.ValidationErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/products": {
            "get": {
                "description": "Retrieves a paginated list of products.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "List products",
                "parameters": [
                    {
                        "type": "string",
                        "name": "brand",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "category",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_after",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_before",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "name": "max_price",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Price filters",
                        "name": "min_price",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search filters",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "per_page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "sku",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sorting",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "sort_order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/responses.ListProductsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Action",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ServerErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new product with the given details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Create a new product",
                "parameters": [
                    {
                        "description": "Create product request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.CreateProductRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Product created successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.CreateProductResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Action",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "schema": {
                            "$ref": "#/definitions/response.ValidationErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/products/{id}": {
            "get": {
                "description": "Retrieves a product by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Get product by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product details retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.GetProductResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Action",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "404": {
                        "description": "Product not found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ServerErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates a product with the given ID and request body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Update product by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update product request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.UpdateProductRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product updated successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.UpdateProductResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Action",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "404": {
                        "description": "Product Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "schema": {
                            "$ref": "#/definitions/response.ValidationErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/refresh-token": {
            "post": {
                "description": "Refresh access token using refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Refresh access token",
                "parameters": [
                    {
                        "description": "Login request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Access token refreshed successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.RefreshAccessTokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Action",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "post": {
                "description": "Creates a new user with the provided information.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "Create user request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.CreateUserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Action",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "schema": {
                            "$ref": "#/definitions/response.ValidationErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "Retrieves user details by their ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.GetUserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Action",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "404": {
                        "description": "User Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ServerErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates an existing user with the provided ID and request body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update user request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.UpdateUserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.BadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized Action",
                        "schema": {
                            "$ref": "#/definitions/response.UnauthorizedResponse"
                        }
                    },
                    "404": {
                        "description": "User Not Found",
                        "schema": {
                            "$ref": "#/definitions/response.NotFoundResponse"
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "schema": {
                            "$ref": "#/definitions/response.ValidationErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.ServerErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "enums.ProductStatus": {
            "type": "string",
            "enum": [
                "available",
                "unavailable",
                "archived",
                "deleted"
            ],
            "x-enum-varnames": [
                "ProductStatusAvailable",
                "ProductStatusUnavailable",
                "ProductStatusArchived",
                "ProductStatusDeleted"
            ]
        },
        "enums.UserRole": {
            "type": "string",
            "enum": [
                "customer",
                "admin"
            ],
            "x-enum-varnames": [
                "RoleCustomer",
                "RoleAdmin"
            ]
        },
        "models.ProductAttributes": {
            "type": "object",
            "additionalProperties": {}
        },
        "requests.CreateOrderRequest": {
            "type": "object",
            "required": [
                "billing_address",
                "items",
                "payment_method",
                "shipping_address",
                "user_id"
            ],
            "properties": {
                "billing_address": {
                    "type": "string",
                    "maxLength": 200,
                    "minLength": 5
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/requests.OrderItemRequest"
                    }
                },
                "notes": {
                    "type": "string",
                    "maxLength": 500
                },
                "payment_method": {
                    "type": "string",
                    "enum": [
                        "credit_card",
                        "paypal",
                        "bank_transfer",
                        "cash_on_delivery"
                    ]
                },
                "shipping_address": {
                    "type": "string",
                    "maxLength": 200,
                    "minLength": 5
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "requests.CreateProductRequest": {
            "type": "object",
            "required": [
                "attributes",
                "brand",
                "category",
                "description",
                "name",
                "price",
                "status"
            ],
            "properties": {
                "attributes": {
                    "description": "Keys and Values are required (dive,keys,required,endkeys,required)",
                    "type": "object",
                    "additionalProperties": {}
                },
                "brand": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "category": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "description": {
                    "type": "string",
                    "maxLength": 500,
                    "minLength": 10
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 3
                },
                "price": {
                    "type": "number",
                    "maximum": 999999.99
                },
                "status": {
                    "$ref": "#/definitions/enums.ProductStatus"
                },
                "weight": {
                    "type": "number",
                    "maximum": 10000
                },
                "weight_unit": {
                    "type": "string",
                    "enum": [
                        "kg",
                        "g",
                        "lb"
                    ]
                }
            }
        },
        "requests.CreateUserRequest": {
            "type": "object",
            "required": [
                "email",
                "first_name",
                "last_name",
                "password",
                "phone_number"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 2
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 2
                },
                "password": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 8
                },
                "phone_number": {
                    "description": "Egypt phone regex",
                    "type": "string"
                }
            }
        },
        "requests.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "test@test.com"
                },
                "password": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 8,
                    "example": "123456789"
                }
            }
        },
        "requests.OrderItemRequest": {
            "type": "object",
            "required": [
                "product_id",
                "quantity"
            ],
            "properties": {
                "product_id": {
                    "type": "integer"
                },
                "quantity": {
                    "type": "integer"
                }
            }
        },
        "requests.UpdateProductRequest": {
            "type": "object",
            "required": [
                "attributes",
                "brand",
                "category",
                "description",
                "name",
                "price",
                "status"
            ],
            "properties": {
                "attributes": {
                    "description": "Keys and Values are required (dive,keys,required,endkeys,required)",
                    "type": "object",
                    "additionalProperties": {}
                },
                "brand": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "category": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "description": {
                    "type": "string",
                    "maxLength": 500,
                    "minLength": 10
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 3
                },
                "price": {
                    "type": "number",
                    "maximum": 999999.99
                },
                "status": {
                    "$ref": "#/definitions/enums.ProductStatus"
                },
                "weight": {
                    "type": "number",
                    "maximum": 10000
                },
                "weight_unit": {
                    "type": "string",
                    "enum": [
                        "kg",
                        "g",
                        "lb"
                    ]
                }
            }
        },
        "requests.UpdateUserRequest": {
            "type": "object",
            "required": [
                "email",
                "first_name",
                "last_name",
                "password",
                "phone_number"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 2
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 2
                },
                "password": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 8
                },
                "phone_number": {
                    "description": "Egypt phone regex",
                    "type": "string"
                }
            }
        },
        "response.BadRequestResponse": {
            "description": "Bad request error response",
            "type": "object",
            "properties": {
                "error_code": {
                    "type": "string",
                    "example": "BAD_REQUEST"
                },
                "message": {
                    "type": "string",
                    "example": "Bad request"
                }
            }
        },
        "response.NotFoundResponse": {
            "description": "Resource not found error response",
            "type": "object",
            "properties": {
                "error_code": {
                    "type": "string",
                    "example": "NOT_FOUND"
                },
                "message": {
                    "type": "string",
                    "example": "Resource not found"
                }
            }
        },
        "response.ServerErrorResponse": {
            "description": "Internal server error response",
            "type": "object",
            "properties": {
                "error_code": {
                    "type": "string",
                    "example": "INTERNAL_ERROR"
                },
                "message": {
                    "type": "string",
                    "example": "Internal Server Error"
                }
            }
        },
        "response.UnauthorizedResponse": {
            "description": "Unauthorized access error response",
            "type": "object",
            "properties": {
                "error_code": {
                    "type": "string",
                    "example": "UNAUTHORIZED"
                },
                "message": {
                    "type": "string",
                    "example": "Unauthorized action"
                }
            }
        },
        "response.ValidationErrorResponse": {
            "description": "Validation error response with field errors",
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "error_code": {
                    "type": "string",
                    "example": "VALIDATION_ERROR"
                },
                "message": {
                    "type": "string",
                    "example": "Validation failed"
                }
            }
        },
        "responses.CreateOrderResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "properties": {
                        "order": {
                            "$ref": "#/definitions/responses.OrderData"
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Order created successfully"
                }
            }
        },
        "responses.CreateProductResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "properties": {
                        "product": {
                            "$ref": "#/definitions/responses.ProductData"
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Product created successfully"
                }
            }
        },
        "responses.CreateUserResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "properties": {
                        "user": {
                            "$ref": "#/definitions/responses.UserData"
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "example": "User created successfully"
                }
            }
        },
        "responses.GetProductResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "properties": {
                        "product": {
                            "$ref": "#/definitions/responses.ProductData"
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Product details retrieved successfully"
                }
            }
        },
        "responses.GetUserResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "properties": {
                        "user": {
                            "$ref": "#/definitions/responses.UserData"
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "example": "User retrieved successfully"
                }
            }
        },
        "responses.ListProductsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "properties": {
                        "meta": {
                            "$ref": "#/definitions/responses.PaginationMeta"
                        },
                        "products": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.ProductData"
                            }
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Products retrieved successfully"
                }
            }
        },
        "responses.LoginResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "properties": {
                        "access_token": {
                            "type": "string",
                            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                        },
                        "refresh_token": {
                            "type": "string",
                            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                        },
                        "user": {
                            "type": "object",
                            "properties": {
                                "created_at": {
                                    "type": "string",
                                    "example": "2024-01-01T00:00:00Z"
                                },
                                "email": {
                                    "type": "string",
                                    "example": "user@example.com"
                                },
                                "first_name": {
                                    "type": "string",
                                    "example": "John"
                                },
                                "id": {
                                    "type": "integer",
                                    "example": 1
                                },
                                "is_active": {
                                    "type": "boolean",
                                    "example": true
                                },
                                "is_admin": {
                                    "type": "boolean",
                                    "example": false
                                },
                                "last_login_at": {
                                    "type": "string",
                                    "example": "2024-01-01T00:00:00Z"
                                },
                                "last_name": {
                                    "type": "string",
                                    "example": "Doe"
                                },
                                "phone_number": {
                                    "type": "string",
                                    "example": "+1234567890"
                                },
                                "role": {
                                    "allOf": [
                                        {
                                            "$ref": "#/definitions/enums.UserRole"
                                        }
                                    ],
                                    "example": "customer"
                                },
                                "updated_at": {
                                    "type": "string",
                                    "example": "2024-01-01T00:00:00Z"
                                }
                            }
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "example": "User logged in successfully"
                }
            }
        },
        "responses.OrderData": {
            "type": "object",
            "properties": {
                "actual_delivery": {
                    "type": "string"
                },
                "billing_address": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "estimated_delivery": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "notes": {
                    "type": "string"
                },
                "order_items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responses.OrderItem"
                    }
                },
                "shipping_address": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "total_amount": {
                    "type": "number"
                },
                "tracking_number": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "responses.OrderItem": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "discount": {
                    "type": "number"
                },
                "id": {
                    "type": "integer"
                },
                "order_id": {
                    "type": "integer"
                },
                "product_id": {
                    "type": "integer"
                },
                "quantity": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "tax": {
                    "type": "number"
                },
                "total_price": {
                    "type": "number"
                },
                "unit_price": {
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "responses.PaginationMeta": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer",
                    "example": 10
                },
                "next_page": {
                    "type": "integer",
                    "example": 3
                },
                "page": {
                    "type": "integer",
                    "example": 2
                },
                "prev_page": {
                    "type": "integer",
                    "example": 1
                },
                "total": {
                    "type": "integer",
                    "example": 100
                },
                "total_pages": {
                    "type": "integer",
                    "example": 10
                }
            }
        },
        "responses.ProductData": {
            "type": "object",
            "properties": {
                "attributes": {
                    "$ref": "#/definitions/models.ProductAttributes"
                },
                "brand": {
                    "type": "string",
                    "example": "brand 1"
                },
                "category": {
                    "type": "string",
                    "example": "Category 1"
                },
                "description": {
                    "type": "string",
                    "example": "Product 1 description"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "Product 1"
                },
                "price": {
                    "type": "integer",
                    "example": 1000
                },
                "sku": {
                    "type": "string",
                    "example": "SKU_1"
                },
                "status": {
                    "type": "string",
                    "example": "available"
                },
                "weight": {
                    "type": "number",
                    "example": 10.5
                },
                "weight_unit": {
                    "type": "string",
                    "example": "kg"
                }
            }
        },
        "responses.RefreshAccessTokenResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "properties": {
                        "access_token": {
                            "type": "string",
                            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Access token refreshed successfully"
                }
            }
        },
        "responses.UpdateProductResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "properties": {
                        "product": {
                            "$ref": "#/definitions/responses.ProductData"
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Product updated successfully"
                }
            }
        },
        "responses.UpdateUserResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "properties": {
                        "user": {
                            "$ref": "#/definitions/responses.UserData"
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "example": "User updated successfully"
                }
            }
        },
        "responses.UserData": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_active": {
                    "type": "boolean"
                },
                "last_login_at": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "TaskGo API",
	Description:      "Order Processing System API",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
